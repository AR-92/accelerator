<!-- Improved Chat Component -->
<div class="flex flex-col w-full h-[calc(100vh-4rem)] max-w-5xl mx-auto bg-transparent">
  <!-- Header -->
  <header class="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800">
    <div class="flex items-center gap-3">
      <div class="w-10 h-10 rounded-xl bg-gradient-to-r from-primary-purple to-primary-purple-hover flex items-center justify-center shadow-md">
        <span class="text-white font-semibold">M</span>
      </div>
      <div class="leading-tight">
        <h1 class="text-lg font-semibold text-gray-900 dark:text-white">Manu AI</h1>
        <p class="text-xs text-gray-500 dark:text-gray-400">Conversational assistant</p>
      </div>
    </div>

    <div class="flex items-center gap-2">
      <button aria-label="Conversation info" title="Info" class="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-600 dark:text-gray-300 transition">
        <!-- info icon -->
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600 dark:text-gray-300" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
          <path fill-rule="evenodd" d="M18 10A8 8 0 102 10a8 8 0 0016 0zM9 9a1 1 0 112 0v4a1 1 0 11-2 0V9zM10 6.25a.75.75 0 100-1.5.75.75 0 000 1.5z" clip-rule="evenodd"/>
        </svg>
      </button>
      <button aria-label="Clear chat" id="clear-button" title="Clear chat" class="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-600 dark:text-gray-300 transition">
        <!-- trash icon -->
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600 dark:text-gray-300" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
          <path d="M6 7a1 1 0 011-1h6a1 1 0 011 1v8a2 2 0 01-2 2H8a2 2 0 01-2-2V7z"/>
          <path fill-rule="evenodd" d="M4 5a1 1 0 011-1h2l1-1h4l1 1h2a1 1 0 011 1v1H4V5z" clip-rule="evenodd"/>
        </svg>
      </button>
    </div>
  </header>

   <!-- Messages -->
   <main id="messages-container" class="flex-1 overflow-y-auto p-6 space-y-6 bg-white dark:bg-gray-900" aria-live="polite" aria-atomic="false">
    <div class="mx-auto w-full max-w-3xl text-center">
      <h2 class="text-2xl font-bold text-gray-800 dark:text-white mb-2">How can I help you today?</h2>
      <p class="text-sm text-gray-500 dark:text-gray-400 mb-6">Ask anything — I’ll do my best to help.</p>

      <!-- sample AI message (initial) -->
      <div class="flex items-start gap-3">
        <div class="flex-shrink-0 w-10 h-10 rounded-xl bg-gradient-to-r from-primary-purple to-primary-purple-hover flex items-center justify-center">
          <span class="text-white font-semibold">M</span>
        </div>
        <div class="flex-1">
          <div class="bg-white dark:bg-gray-800 p-4 rounded-2xl rounded-tl-none border border-gray-200 dark:border-gray-700 shadow">
            <p class="text-gray-700 dark:text-gray-300 text-sm leading-relaxed">Hello! I'm Manu AI, your intelligent assistant. How can I help you today?</p>
            <div class="mt-2 text-xs text-gray-400 dark:text-gray-500">just now • AI</div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <!-- Input -->
  <footer class="border-t border-gray-200 dark:border-gray-700 p-4 bg-white dark:bg-gray-800">
    <div class="max-w-3xl mx-auto">
      <form id="chat-form" class="flex flex-col gap-2" autocomplete="off" novalidate>
        <div class="flex items-end gap-3">
          <label for="message-input" class="sr-only">Message Manu AI</label>
          <div class="flex items-center gap-2 flex-1 border border-gray-300 dark:border-gray-600 rounded-2xl bg-white dark:bg-gray-700 focus-within:ring-2 focus-within:ring-primary-purple/50 focus-within:border-primary-purple transition">
            <textarea
              id="message-input"
              name="message"
              placeholder="Message Manu AI..."
              rows="1"
              required
              class="w-full px-4 py-3 resize-none bg-transparent border-0 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-0 max-h-40"
              aria-label="Message input"
            ></textarea>

            <div class="flex items-center gap-1 pr-2">
              <button type="button" id="attach-btn" aria-label="Attach" title="Attach" class="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600 text-gray-600 dark:text-gray-300 transition">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600 dark:text-gray-300" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" aria-hidden="true">
                  <path d="M21.44 11.05L12.53 20a4.5 4.5 0 01-6.36-6.36L12.17 8.1a2.5 2.5 0 013.54 3.54L10.2 17.14" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </button>

              <button type="submit" id="send-button" class="p-2 rounded-lg bg-gradient-to-r from-primary-purple to-primary-purple-hover text-white hover:opacity-95 focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-primary-purple/50 transition" aria-label="Send message">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-white transform rotate-90" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                  <path d="M2.94 2.94a1 1 0 011.32-.083l13 9a1 1 0 01-.083 1.66l-13 8A1 1 0 012 21V3a1 1 0 01.94-.06z"/>
                </svg>
              </button>
            </div>
          </div>
        </div>

        <div class="flex items-center justify-between">
          <p class="text-xs text-gray-500 dark:text-gray-400">Manu AI may be incorrect — verify important info.</p>
          <div class="text-xs text-gray-400 dark:text-gray-500">Press <span class="font-medium">Enter</span> to send • <span class="font-medium">Shift+Enter</span> for newline</div>
        </div>
      </form>
    </div>
  </footer>
</div>

<!-- Script: enhanced behavior -->
<script>
document.addEventListener('DOMContentLoaded', () => {
  const chatForm = document.getElementById('chat-form');
  const messageInput = document.getElementById('message-input');
  const messagesContainer = document.getElementById('messages-container');
  const sendButton = document.getElementById('send-button');
  const clearBtn = document.getElementById('clear-button');

  // Utility: escape inserted content (prevent XSS)
  function escapeHTML(str) {
    return str.replace(/[&<>"'`=\/]/g, (s) => ({
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;',
      '`': '&#96;',
      '=': '&#61;',
      '/': '&#47;'
    }[s]));
  }

  // Auto-resize textarea
  function autosize(el) {
    el.style.height = 'auto';
    el.style.height = Math.min(el.scrollHeight, 320) + 'px';
  }
  messageInput.addEventListener('input', () => autosize(messageInput));

  // Scroll helper: smooth and smart
  function scrollToBottom() {
    messagesContainer.scrollTo({ top: messagesContainer.scrollHeight, behavior: 'smooth' });
  }

  // Add message
  function addMessage({ sender = 'ai', text = '', time = new Date() }) {
    const safe = escapeHTML(text).replace(/\n/g, '<br>');
    const wrapper = document.createElement('div');
    wrapper.className = 'flex mb-6';
    const timestamp = time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

    if (sender === 'user') {
      wrapper.classList.add('justify-end');
      wrapper.innerHTML = `
        <div class="flex items-start max-w-3xl w-full">
          <div class="flex-1 flex justify-end">
            <div class="bg-gradient-to-r from-primary-purple to-primary-purple-hover text-white p-4 rounded-2xl rounded-tr-none shadow-md max-w-[80%] break-words text-sm leading-relaxed">${safe}
              <div class="mt-2 text-[11px] text-white/70 text-right">${timestamp} • You</div>
            </div>
          </div>
          <div class="flex-shrink-0 w-9 h-9 rounded-full bg-gray-200 dark:bg-gray-600 flex items-center justify-center ml-3">
            <span class="text-gray-700 dark:text-gray-300 font-bold text-sm">Y</span>
          </div>
        </div>
      `;
    } else {
      wrapper.innerHTML = `
        <div class="flex items-start max-w-3xl w-full">
          <div class="flex-shrink-0 w-10 h-10 rounded-xl bg-gradient-to-r from-primary-purple to-primary-purple-hover flex items-center justify-center mr-3 shadow-sm">
            <span class="text-white font-semibold">M</span>
          </div>
          <div class="flex-1">
            <div class="bg-white dark:bg-gray-800 p-4 rounded-2xl rounded-tl-none border border-gray-200 dark:border-gray-700 shadow-sm max-w-[90%] break-words text-sm leading-relaxed">
              ${safe}
              <div class="mt-2 text-[11px] text-gray-400 dark:text-gray-500">${timestamp} • AI</div>
            </div>
          </div>
        </div>
      `;
    }

    messagesContainer.appendChild(wrapper);
    // small delay so screen readers pick up updates better
    setTimeout(scrollToBottom, 30);
  }

  // Typing indicator (returns remover)
  function showTypingIndicator() {
    const el = document.createElement('div');
    el.className = 'flex mb-6';
    el.id = 'typing-indicator';
    el.innerHTML = `
      <div class="flex items-start max-w-3xl w-full">
        <div class="flex-shrink-0 w-10 h-10 rounded-xl bg-gradient-to-r from-primary-purple to-primary-purple-hover flex items-center justify-center mr-3">
          <span class="text-white font-semibold">M</span>
        </div>
        <div class="flex-1">
          <div class="bg-white dark:bg-gray-800 p-3 rounded-2xl rounded-tl-none border border-gray-200 dark:border-gray-700 shadow-sm max-w-[60%]">
            <div class="flex items-center gap-2">
              <span class="w-2 h-2 bg-primary-purple/60 dark:bg-primary-purple/50 rounded-full animate-bounce"></span>
              <span class="w-2 h-2 bg-primary-purple/60 dark:bg-primary-purple/50 rounded-full animate-bounce" style="animation-delay:100ms"></span>
              <span class="w-2 h-2 bg-primary-purple/60 dark:bg-primary-purple/50 rounded-full animate-bounce" style="animation-delay:200ms"></span>
            </div>
          </div>
        </div>
      </div>
    `;
    messagesContainer.appendChild(el);
    scrollToBottom();
    return () => el.remove();
  }

  // Submit
  chatForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const msg = messageInput.value.trim();
    if (!msg) return;

    // Add user bubble
    addMessage({ sender: 'user', text: msg });
    messageInput.value = '';
    autosize(messageInput);

    // Show typing
    const removeTyping = showTypingIndicator();

    try {
      // Replace with your backend endpoint; keep Content-Type JSON
      const resp = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ message: msg })
      });

      const data = await resp.json();
      removeTyping();

      if (data && data.success && data.response) {
        addMessage({ sender: 'ai', text: data.response });
      } else if (data && data.error) {
        addMessage({ sender: 'ai', text: 'Error: ' + (data.error || 'Unknown error') });
      } else {
        addMessage({ sender: 'ai', text: 'Sorry — I could not process that.' });
      }
    } catch (err) {
      removeTyping();
      console.error(err);
      addMessage({ sender: 'ai', text: 'Network error — check your connection.' });
    }
  });

  // Enter vs Shift+Enter
  messageInput.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      chatForm.dispatchEvent(new Event('submit', { bubbles: true, cancelable: true }));
    }
  });

  // Clear chat
  clearBtn?.addEventListener('click', () => {
    // For privacy, ask user (simple confirm)
    if (confirm('Clear the chat history? This cannot be undone.')) {
      // remove all message children then re-add the greeting
      while (messagesContainer.firstChild) messagesContainer.removeChild(messagesContainer.firstChild);
      addMessage({ sender: 'ai', text: "Chat cleared. How can I help you now?" });
    }
  });

  // Small initial message to ensure aria-live picks it up
  // (already exists in markup; keep as-is)
});
</script>

<!-- Optional: small Tailwind tips
  • Consider adding thin custom scrollbar utilities in your tailwind.config for consistent theming.
  • If you want rounded avatars or different color schemes, centralize them in your Tailwind config.
-->
